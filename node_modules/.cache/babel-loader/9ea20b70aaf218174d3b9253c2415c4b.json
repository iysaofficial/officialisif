{"ast":null,"code":"/**\r\n * Copyright 2015, Yahoo! Inc.\r\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\r\n */\n\nimport assign from 'lodash/assign';\nimport globalVars from '../globalVars';\nvar supportPassiveEvent = globalVars.supportPassiveEvent;\nvar defaultEventOption = {\n  capture: false,\n  passive: false\n};\n\n/**\r\n * Cross-browser addEventListener.\r\n * @method listen\r\n * @param {Object} target - The target to add event listener.\r\n * @param {String} eventType - The event type.\r\n * @param {Function} handler - The event handler.\r\n * @param {Object} handler - The options object that specifies\r\n * characteristics about the event listener.\r\n * @return {Object} The object to be able to remove the handler.\r\n */\nfunction listen(target, eventType, handler, options) {\n  var add = 'addEventListener';\n  var _remove = 'removeEventListener';\n  var type = eventType;\n  var eventOptions = supportPassiveEvent ? assign({}, defaultEventOption, options) : false;\n  if (!target.addEventListener && target.attachEvent) {\n    add = 'attachEvent';\n    _remove = 'detachEvent';\n    type = 'on' + eventType;\n  }\n  target[add](type, handler, eventOptions);\n  return {\n    remove: function remove() {\n      target[_remove](eventType, handler);\n    }\n  };\n}\nexport default listen;","map":{"version":3,"names":["assign","globalVars","supportPassiveEvent","defaultEventOption","capture","passive","listen","target","eventType","handler","options","add","_remove","type","eventOptions","addEventListener","attachEvent","remove"],"sources":["C:/Users/HP/Documents/WEBSITE/officialisif/node_modules/subscribe-ui-event/dist-es/lib/listen.js"],"sourcesContent":["/**\r\n * Copyright 2015, Yahoo! Inc.\r\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\r\n */\r\n\r\nimport assign from 'lodash/assign';\r\nimport globalVars from '../globalVars';\r\n\r\nvar supportPassiveEvent = globalVars.supportPassiveEvent;\r\n\r\n\r\nvar defaultEventOption = {\r\n  capture: false,\r\n  passive: false\r\n};\r\n\r\n/**\r\n * Cross-browser addEventListener.\r\n * @method listen\r\n * @param {Object} target - The target to add event listener.\r\n * @param {String} eventType - The event type.\r\n * @param {Function} handler - The event handler.\r\n * @param {Object} handler - The options object that specifies\r\n * characteristics about the event listener.\r\n * @return {Object} The object to be able to remove the handler.\r\n */\r\nfunction listen(target, eventType, handler, options) {\r\n  var add = 'addEventListener';\r\n  var _remove = 'removeEventListener';\r\n  var type = eventType;\r\n\r\n  var eventOptions = supportPassiveEvent ? assign({}, defaultEventOption, options) : false;\r\n\r\n  if (!target.addEventListener && target.attachEvent) {\r\n    add = 'attachEvent';\r\n    _remove = 'detachEvent';\r\n    type = 'on' + eventType;\r\n  }\r\n  target[add](type, handler, eventOptions);\r\n\r\n  return {\r\n    remove: function remove() {\r\n      target[_remove](eventType, handler);\r\n    }\r\n  };\r\n}\r\n\r\nexport default listen;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,MAAM,MAAM,eAAe;AAClC,OAAOC,UAAU,MAAM,eAAe;AAEtC,IAAIC,mBAAmB,GAAGD,UAAU,CAACC,mBAAmB;AAGxD,IAAIC,kBAAkB,GAAG;EACvBC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAMA,CAACC,MAAM,EAAEC,SAAS,EAAEC,OAAO,EAAEC,OAAO,EAAE;EACnD,IAAIC,GAAG,GAAG,kBAAkB;EAC5B,IAAIC,OAAO,GAAG,qBAAqB;EACnC,IAAIC,IAAI,GAAGL,SAAS;EAEpB,IAAIM,YAAY,GAAGZ,mBAAmB,GAAGF,MAAM,CAAC,CAAC,CAAC,EAAEG,kBAAkB,EAAEO,OAAO,CAAC,GAAG,KAAK;EAExF,IAAI,CAACH,MAAM,CAACQ,gBAAgB,IAAIR,MAAM,CAACS,WAAW,EAAE;IAClDL,GAAG,GAAG,aAAa;IACnBC,OAAO,GAAG,aAAa;IACvBC,IAAI,GAAG,IAAI,GAAGL,SAAS;EACzB;EACAD,MAAM,CAACI,GAAG,CAAC,CAACE,IAAI,EAAEJ,OAAO,EAAEK,YAAY,CAAC;EAExC,OAAO;IACLG,MAAM,EAAE,SAASA,MAAMA,CAAA,EAAG;MACxBV,MAAM,CAACK,OAAO,CAAC,CAACJ,SAAS,EAAEC,OAAO,CAAC;IACrC;EACF,CAAC;AACH;AAEA,eAAeH,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module"}